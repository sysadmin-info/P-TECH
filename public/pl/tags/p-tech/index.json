[{"content":"Ćwiczenia do wykonania: Wygeneruj parę kluczy RSA za pomocą ssh-keygen Wyeksportuj klucz publiczny z klienta do serwera za pomocą ssh-copy-id Zaloguj się za pomocą hasła poprzez ssh do serwera i przełącz na konto root za pomocą komendy sudo - su lub sudo -i Włącz logowanie kluczami i wyłącz logowanie hasłem. Zapisz zmiany i zrestartuj usługę ssh. Nie zamykaj bieżącej sesji. Otwórz nową sesję ssh i zaloguj się do serwera za pomocą klucza prywatnego. Jeśli udało ci się zalogować, zabezpiecz serwer korzystając z poniższych informacji a następnie zrestartuj usługę ssh na drugiej sesji. Pamiętaj, by pierwszą sesję ssh cały czas mieć otwartą, by w razie potrzeby móc cofnąć zmiany. Zrestartuj usługę ssh i sprawdź, czy możesz zalogować się za pomocą trzeciej sesji do serwera. Jeśli tak, udało ci się poprawnie skonfigurować serwer ssh. Dla chętnych napisz skrypt z użyciem sed lub awk, który dokona zmian po stronie serwera w pliku sshd_config, aby nie trzeba było ręcznie nanosić zmian. OpenSSH : KeyBoard-Intereractive Auth OpenSSH jest już domyślnie zainstalowany, więc nie ma potrzeby instalowania nowych pakietów. Domyślnie możesz logować się za pomocą KeyBoard-Interactive Authentication, ale zmień niektóre ustawienia dla bezpieczeństwa jak poniżej.\nInstalacja firewalld SLES Debian RedHat SLES Aby zainstalować firewalld wpisz:\n# odśwież repozytoria sudo zypper ref # zainstaluj firewalld sudo zypper -n in firewalld # włącz firewalld podczas boot-owania sudo systemctl enable firewalld # wystartuj firewalld sudo systemctl start firewalld Debian Aby zainstalować firewalld wpisz:\n# odśwież repozytoria sudo apt update # zainstaluj firewalld sudo apt -y install firewalld # włącz firewalld podczas boot-owania sudo systemctl enable firewalld # wystartuj firewalld sudo systemctl start firewalld Red Hat Aby zainstalować firewalld wpisz:\nsudo yum install firewalld -y lub sudo dnf install firewalld -y # włącz firewalld podczas boot-owania sudo systemctl enable firewalld # wystartuj firewalld sudo systemctl start firewalld Domyślnie firewalld po instalacji ma zaimplementowaną usługę SSH jako dozwoloną. Jeśli nie, zawsze możesz zezwolić na usługę SSH.\nlinux:~ # firewall-cmd --add-service=ssh --permanent success linux:~ # firewall-cmd --reload success Konfiguracja klienta SSH Połącz się z serwerem SSH za pomocą zwykłego użytkownika.\n# ssh [login_user@hostname_or_IP_address] adrian@client:~\u0026gt; ssh adrian@example.com The authenticity of host \u0026#39;example.com (10.0.0.50)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:h0QhlXgCZ860UjM8sAjY6Wmrr2EqSIY5UADBi0wAFV4. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added \u0026#39;example.com,10.0.0.50\u0026#39; (ECDSA) to the list of known hosts. Password: # login user\u0026#39;s password adrian@example.com:~\u0026gt; # just logined Uwierzytelnianie parą kluczy SSH Skonfiguruj serwer SSH do logowania za pomocą Key-Pair Authentication. Utwórz klucz prywatny dla klienta i klucz publiczny dla serwera, aby to zrobić.\nUtwórz Key-Pair dla każdego użytkownika, więc zaloguj się wspólnym użytkownikiem na SSH Server Host i pracuj jak poniżej.\n# utwórz parę kluczy na kliencie ssh-keygen -t rsa -b 4096 -C \u0026#34;imię i nazwisko\u0026#34; Generating public/private rsa key pair. Enter file in which to save the key (/home/adrian/.ssh/id_rsa): /home/adrian/.ssh/p-tech Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/adrian/.ssh/p-tech Your public key has been saved in /home/adrian/.ssh/p-tech.pub The key fingerprint is: SHA256:IPtApVZ/8o6mCY3lKSvcfEtkD6wzHJ0LzKeHFm3qbxs adrian@G02PLXN05963 The key\u0026#39;s randomart image is: +---[RSA 4096]----+ | o | | + . | | = . o . | | = * o + | | O % S . | | . ^ = o | | . o\u0026amp; E + . | | oooOo= | | .o+*o | +----[SHA256]-----+ Aby wygenerować passphrase możesz użyć następującego polecenia w osobnym oknie CLI\nhexdump -vn16 -e\u0026#39;4/4 \u0026#34;%08X\u0026#34; 1 \u0026#34;\\n\u0026#34;\u0026#39; /dev/urandom Wylistuj parę kluczy\nadrian@linux:~\u0026gt; ll ~/.ssh/p-tech* -rw------- 1 adrian adrian 3.4K Apr 1 16:44 /home/adrian/.ssh/p-tech -rw-r--r-- 1 adrian adrian 745 Apr 1 16:44 /home/adrian/.ssh/p-tech.pub Skopiuj klucz publiczny z klienta na serwer\nssh-copy-id -i ~/.ssh/p-tech.pub student@IP-ADDRRESS Podaj hasło\nZaloguj się z kluczem do serwera\nssh -i ~/.ssh/p-tech student@IP-ADDRRESS Podaj passphrase\nAutomatyzacja Dodaj poniższe wpisy do pliku .bashrc lub .zshrc znajdującego się w katalogu /home/user. Pierwszy wpis uruchamia agenta ssh, a drugi ładuje do niego Twój klucz prywatny. Jeśli ustawiłeś passphrase na swoim kluczu, agent zapyta o jego wpisanie. Możesz dodać więcej niż jeden klucz. Należy pamiętać, że za każdym razem, gdy Bash lub Zsh uruchomi proces restartu lub rozruchu systemu operacyjnego, w CLI poprosi o podanie passphrase.\neval $(ssh-agent -s) ssh-add ~/.ssh/p-tech Zabezpieczanie SSH Edytuj /etc/ssh/sshd_config\nsudo vi /etc/ssh/sshd_config # odkomentuj te linie i zmień na [no] PasswordAuthentication no ChallengeResponseAuthentication no # Wyłącz puste hasła # Musisz zapobiec zdalnym logowaniom z kont z pustymi hasłami dla zwiększenia bezpieczeństwa. PermitEmptyPasswords no # Ograniczenie dostępu użytkowników do SSH # Aby zapewnić kolejną warstwę bezpieczeństwa, powinieneś ograniczyć logowanie do SSH # tylko do niektórych użytkowników, którzy potrzebują zdalnego dostępu. # W ten sposób zminimalizujesz wpływ posiadania użytkownika ze słabym hasłem. # Dodaj linię \u0026#34;AllowUsers\u0026#34;, a następnie listę nazw użytkowników i oddziel je spacją: AllowUsers student adrian # Wyłączanie logowania roota # Jedną z najbardziej niebezpiecznych dziur w zabezpieczeniach, # jakie możesz mieć w swoim systemie jest umożliwienie bezpośredniego logowania się # do roota przez SSH. W ten sposób hakerzy próbujący złamać hasło roota mogą # hipotetycznie uzyskać dostęp do systemu; a jeśli się nad tym zastanowić, # root może wyrządzić dużo więcej szkód na maszynie niż zwykły użytkownik. # Aby wyłączyć logowanie przez SSH jako root, zmień linię na taką: PermitRootLogin no # Ostatecznie możesz pozwolić rootowi na logowanie się przez SSH przy użyciu pary kluczy. # Zrób to tylko jeśli serwer nie jest w DMZ (nie ma dostępu z Internetu) PermitRootLogin prohibit-password # Dodaj Protocol 2 # SSH posiada dwa protokoły, których może używać. Protokół 1 jest starszy i mniej bezpieczny. # Protokół 2 jest tym, czego powinieneś używać, aby wzmocnić swoje bezpieczeństwo. # Jeśli chcesz, aby Twój serwer był zgodny z PCI, musisz wyłączyć protokół 1. Protocol 2 # Protocol # Określa wersje protokołu, które obsługuje sshd(8). Możliwe. # wartości to \u0026#39;1\u0026#39; i \u0026#39;2\u0026#39;. Wiele wersji musi być oddzielonych przecinkami. # Domyślnie jest to \u0026#39;2\u0026#39;. Protokół 1 cierpi na szereg # słabości kryptograficznych i nie powinien być używany. # Jest oferowany tylko w celu wsparcia starszych urządzeń. # Przykład: Protocol 2, 1 # Użyj innego portu # Jedną z głównych korzyści ze zmiany portu i użycia niestandardowego portu # jest uniknięcie bycia widzianym przez przypadkowe skanowanie. Zdecydowana większość hakerów # szukających otwartych serwerów SSH będzie szukała portu 22, ponieważ domyślnie, # SSH nasłuchuje połączeń przychodzących na tym porcie. # Jeśli trudniej jest zeskanować Twój serwer SSH, to zmniejszają się Twoje szanse na atak. # Uruchom SSH na niestandardowym porcie powyżej portu 1024. Port 2025 # Możesz wybrać dowolny nieużywany port, o ile nie jest on używany przez inną usługę. # Wiele osób może wybrać 222 lub 2222 jako swój port, ponieważ # jest to dość łatwe do zapamiętania, ale właśnie z tego powodu, hakerzy skanujący port 22 # prawdopodobnie będą również próbować portów 222 i 2222. Spróbuj wybrać numer portu # który nie jest jeszcze używany, podążaj za tym linkiem, aby uzyskać listę numerów portów i ich znanych usług. # Jeśli StrictModes jest ustawiony na tak, to wymagane są poniższe uprawnienia. # sudo chmod 700 ~/.ssh # sudo chmod 600 ~/.ssh/authorized_keys StrictModes yes # Konfiguracja interwału czasu bezczynności ClientAliveInterval 360 ClientAliveCountMax 1 # ClientAliveInterval - Ustawia interwał czasowy w sekundach, po którym, jeśli nie otrzymano żadnych danych od klienta, # sshd wyśle wiadomość przez kanał szyfrowany, aby zażądać odpowiedzi od klienta. Domyślnie jest to 0, co oznacza, # że te wiadomości nie będą wysyłane do klienta. Opcja dotyczy tylko protokołu w wersji 2. # ClientAliveCountMax - Wartość domyślna to 3. Jeśli ClientAliveInterval ustawiony jest na 15, a ClientAliveCountMax # na wartość domyślną, to niereagujący klienci SSH będą rozłączani po około 45 sekundach. # Opcja dotyczy tylko protokołu w wersji 2. # Wartość timeout jest obliczana przez pomnożenie # ClientAliveInterval i ClientAliveCountMax. # timeout interval = ClientAliveInterval * ClientAliveCountMax # Opcje OpenSSH ClientAliveInterval i ClientAliveCountMax # nie są używane do rozłączania nieaktywnych sesji. # W rzeczywistości zapobiegają one zamknięciu połączenia, # nawet na nieaktywnych sesjach, tak długo jak klient i łącze sieciowe jest żywe. # Jest to wewnętrzny mechanizm ssh, który wysyła pakiet \u0026#34;null # wewnątrz ustanowionego tunelu, i czeka na odpowiedź od klienta. # W tym przypadku wysyła jeden pakiet co 360 sekund, i rozłącza się po 1 brakującej odpowiedzi. # Chociaż te opcje są pomocne w wykrywaniu i czyszczeniu rozłączonych sesji klientów, # nie zabiją one sesji klientów, którzy nadal są połączeni, nawet jeśli są nieaktywni. # Chyba, że ich klient nie odpowie na pakiet null. Aby odłączyć nieaktywnych klientów, jeśli używasz bash jako powłoki, możesz ustawić wartość TMOUT w ogólnosystemowym profilu domyślnym lub na użytkownika:\n# TMOUT Jeśli ustawione na wartość większą od zera, # TMOUT traktowane jest jako domyślny limit czasu (tiomeout) # dla wbudowanego odczytu (read). # # Polecenie select kończy pracę jeśli nie otrzyma danych na wejściu # z terminala po TMOUT sekund. # # W powłoce interaktywnej, wartość ta interpretowana jest jako liczba # sekund oczekiwania na wiersz wejścia po wydaniu głównej zachęty. # # Bash kończy pracę po odczekaniu tej liczby sekund # jeśli nie nadejdzie pełny wiersz wejścia. # Na przykład, dodanie następującej linii do `/etc/.bashrc`. # zamknie sesje bashowe nieaktywnego użytkownika po 5 minutach, # ale przeczytaj następujące ostrzeżenie przed włączeniem tego: `export TMOUT=300` # Ostrzeżenie: jako codzienny użytkownik powłoki, często pozwalam, # aby jakiś terminal był otwarty podczas wielozadaniowości. # Osobiście uznałbym ten mechanizm TMOUT za bardzo denerwujący, # jeśli byłby ustawiony na niską wartość (nawet 10 minut). # Nie polecam tego, chyba że jest przynajmniej ustawiony # na bardzo wysoką wartość (co najmniej 1 godzinę - 3600 sekund). # Moja opinia jest taka, że opcje OpenSSH `ClientAliveInterval` i `ClientAliveCountMax` # (lub `ServerAliveInterval` i `ServerAliveCountMax`, ustawiane po stronie serwera), # wystarczą, aby pozbyć się zombie/rozłączonych klientów. # Używając ich, masz już gwarancję, że aktywna sesja na serwerze # odpowiada otwartemu terminalowi na podłączonym kliencie. # # To jest wybór użytkownika, aby utrzymać swój terminal otwarty, # podczas gdy rozumiem. że chcesz zamknąć rozłączonych klientów. # Nie widzę sensu zamykania sesji od legalnych użytkowników. Bezpieczna konfiguracja szyfrów/MAC/Kex dostępnych w SSH KexAlgorithms diffie-hellman-group14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,curve25519-sha256,curve25519-sha256@libssh.org Ciphers aes256-ctr,aes192-ctr,aes128-ctr MACs hmac-sha2-512 # Mniej bezpieczne, lecz działające KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com Upewnij się, że twój klient ssh może używać tych szyfrów, uruchom:\nssh -Q cipher | sort -u to see the list Polecam przeczytać ten artykuł::\nSecure Configuration of Ciphers/MACs/Kex available in SSH\nZrestartuj usługę SSH\nsudo systemctl restart sshd ","description":"Konfiguracja serwera SSH w celu zalogowania się do serwera ze zdalnego komputera.","id":0,"section":"lab","tags":["P-TECH"],"title":"Serwer SSH","uri":"https:/p-tech-site.netlify.app/pl/lab/serwer-ssh/"},{"content":"Na zajęciach wykorzystujemy maszyny wirtualne zbudowane z szablonu AWS. Dlaczego AWS, a nie maszyny wirtualne w Virtual Box? Z kilku powodów. Przede wszystkim na maszynie wirtualnej bardzo problematyczne jest postawienie serwera web/www. Z prostego powodu. Trzeba wiedzieć, czy się da wystawić maszynę wirtualną za pomocą wirtualnego bridge spiętego z naszą kartą sieciową na świat i jak ustawić przekazywanie portu na routerze tak, aby ruch z portów 80 i 443 był przekazywany do naszego komputera, a dalej do maszyny wirtualnej. Po drugie cena - darmowe 750 godzin pracy maszyn w ramach tzw. \u0026ldquo;free tier\u0026rdquo; i w późniejszym okresie cena jednostkowa za maszynę t2.nano wynosi 0,0051 USD za godzinę pracy jednej maszyny wirtualnej. Łatwiejsze wystawianie treści na świat po instalacji serwera web (Apache2/Nginx). Aczkolwiek w praktyce, mając VPS, robi się to inaczej i będzie to uwzględnione podczas zajęć. Sposobów budowania stron i aplikacji jest co najmniej kilka i nie wszystkie zdążę pokazać. Szybkość, prostota. Wady AWS? Brak możliwości postawienia w łatwy sposób własnego DHCP czy DNS, ponieważ AWS realizuje te usługi automatycznie i dostarcza je w postaci gotowego rozwiązania. Da się to rozwiązać, natomiast jest to skomplikowane. Stąd też dodatkowo zamierzam rozejrzeć się za rozwiązaniem, które pozwoli skonfigurować serwer DNS oraz DHCP tak, jak się to robi zgodnie z dobrymi praktykami. Do każdych zajęć będę przygotowywać rozwiązanie w taki sposób, aby umożliwić wykonanie ćwiczeń, lub przynajmniej ich prezentację zgodnie z zasadami. Proszę pamiętać, że istnieje więcej, niż jedno rozwiązanie i to od was zależy, które wybierzecie. Zachęcam do samodzielnej nauki i praktyki poprzez powtarzanie ćwiczeń, komend i zrozumienie tego, co robicie. Miłej nauki!\n","description":"Witaj na stronie P-TECH. W dziale lab znajdują się ćwiczenia oraz teoria potrzebna do realizacji ćwiczeń. W miarę możliwości strona będzie rozbudowywana o kolejne warsztaty, ćwiczenia i teorię.","id":1,"section":"lab","tags":["P-TECH"],"title":"Witaj na stronie P-TECH","uri":"https:/p-tech-site.netlify.app/pl/lab/witaj/"}]